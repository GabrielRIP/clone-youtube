{"version":3,"sources":["img/loading.jpeg","components/templates/DisplayPlayer.jsx","img/logo-linux.png","components/templates/MenuInfo.jsx","components/templates/ListPlayer.jsx","App.js","redux/reducers/Prueva.js","redux/reducers/RootReducer.js","redux/store.js","serviceWorker.js","index.js"],"names":["DisplayPlayer","className","MenuInfo","aria-hidden","focusable","role","viewBox","fill","d","src","LogoLinux","alt","ListPlayer","App","defaultState","name","lastName","prueva","state","action","type","RootReducer","combineReducers","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8OAAe,I,MCGA,SAASA,IACtB,OACE,wBAAQC,UAAU,W,UCLP,MAA0B,uCCG1B,SAASC,IACtB,OACE,0BAASD,UAAU,YAAnB,UACE,sBAAKA,UAAU,cAAf,UACE,oBAAIA,UAAU,QAAd,4BACA,mBAAGA,UAAU,WAAb,uBACA,qBAAKE,cAAY,OAAOC,UAAU,QAAQC,KAAK,MAAMC,QAAQ,cAA7D,SAA2E,sBAAMC,KAAK,eAAeC,EAAE,wPAEzG,sBAAKP,UAAU,gBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,qBAAKQ,IAAKC,EAAWC,IAAI,SAASV,UAAU,SAC5C,qBAAIA,UAAU,SAAd,UACE,sBAAMA,UAAU,KAAhB,uBACA,sBAAMA,UAAU,OAAhB,oCAGJ,wBAAQA,UAAU,OAAlB,+BCnBO,SAASW,IACtB,OACE,6CCKW,SAASC,IACtB,OACE,sBAAKZ,UAAU,MAAf,UACE,cAACD,EAAD,IACA,uBAAMC,UAAU,OAAhB,UACE,cAACC,EAAD,IACA,cAACU,EAAD,U,kBCbFE,EAAe,CACnBC,KAAM,QACNC,SAAU,UASGC,EANA,WAAqC,IAAnCC,EAAkC,uDAA1BJ,EAAcK,EAAY,uCAEtC,OADJA,EAAOC,KACIF,GCALG,EAJKC,YAAgB,CAClCL,WCEIM,EAAmBC,OAAOC,sCAAwCC,IAMzDC,EAJDC,YAAYP,EAAaE,EACrCM,YAAgBC,O,OCGEC,QACW,cAA7BP,OAAOQ,SAASC,UAEe,UAA7BT,OAAOQ,SAASC,UAEhBT,OAAOQ,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUV,MAAOA,EAAjB,SACE,cAAC,EAAD,QAGJW,SAASC,eAAe,SDqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAACC,GAClCA,EAAaC,kB","file":"static/js/main.2808ccd1.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/loading.3b1c8aa9.jpeg\";","import './style/displayPlayer.scss'\nimport Loading from '../../img/loading.jpeg'\n\nexport default function DisplayPlayer() {\n  return (\n    <header className=\"header\">\n    </header>\n  )\n}\n      //<img src={Loading} alt=\"Loading..\" className=\"imgLoading\"/>\n","export default __webpack_public_path__ + \"static/media/logo-linux.19a68814.png\";","import './style/menuInfo.scss'\nimport LogoLinux from '../../img/logo-linux.png'\n\nexport default function MenuInfo() {\n  return (\n    <section className=\"container\">\n      <div className=\"containerUp\">\n        <h2 className=\"title\">Titulo inicial</h2>\n        <p className=\"textView\">926 views</p>\n        <svg aria-hidden=\"true\" focusable=\"false\" role=\"img\" viewBox=\"0 0 320 512\"><path fill=\"currentColor\" d=\"M34.52 239.03L228.87 44.69c9.37-9.37 24.57-9.37 33.94 0l22.67 22.67c9.36 9.36 9.37 24.52.04 33.9L131.49 256l154.02 154.75c9.34 9.38 9.32 24.54-.04 33.9l-22.67 22.67c-9.37 9.37-24.57 9.37-33.94 0L34.52 272.97c-9.37-9.37-9.37-24.57 0-33.94z\"></path></svg>\n      </div>\n      <div className=\"containerDown\">\n        <div className=\"boxUser\">\n          <img src={LogoLinux} alt=\"mi log\" className=\"logo\"/>\n          <h3 className=\"chanel\">\n            <span className=\"up\">Mi chanel</span>\n            <span className=\"down\">500 suscriptores</span>\n          </h3>\n        </div>\n        <button className=\"subs\">SUSCRIBIRSE</button>\n      </div>\n    </section>\n  )\n}\n","export default function ListPlayer() {\n  return (\n    <div>ListPlayer</div>\n  )\n}\n","import './App.scss';\n\n//Import Components\nimport DisplayPlayer from './components/templates/DisplayPlayer'\nimport MenuInfo from './components/templates/MenuInfo'\nimport ListPlayer from './components/templates/ListPlayer'\n\nexport default function App() {\n  return (\n    <div className=\"App\">\n      <DisplayPlayer />\n      <main className=\"main\">\n        <MenuInfo />\n        <ListPlayer />\n      </main>\n    </div>\n  );\n}\n","const defaultState = {\n  name: 'jesus',\n  lastName: 'rivera'\n}\n\nconst prueva = ( state = defaultState, action ) => {\n  switch(action.type) {\n    default: return state\n  }\n}\n\nexport default prueva\n","import { combineReducers } from \"redux\";\nimport prueva from './Prueva'\n\nconst RootReducer = combineReducers({\n  prueva\n})\n\nexport default RootReducer\n\n","import { applyMiddleware, createStore, compose } from \"redux\";\nimport thunk from \"redux-thunk\"; // para trabajar de manera asincrona \"no esta entendido del todo\"\n\n//The combine Reducers\nimport RootReducer from './reducers/RootReducer'\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose\n\nconst store = createStore(RootReducer, composeEnhancers(\n  applyMiddleware(thunk)\n))\n\nexport default store\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nimport store from './redux/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}